#include <iostream>
#include <vector>

using namespace std;

const int N = 9;

void printBoard(const vector<vector<int>>& board) {
    for (const auto& row : board) {
        for (int num : row) {
            cout << (num == 0 ? '.' : char(num + '0')) << ' ';
        }
        cout << endl;
    }
}


bool isValid(const vector<vector<int>>& board, int row, int col, int num) {
    // Check if num is not in the current row
    for (int c = 0; c < N; ++c) {
        if (board[row][c] == num) {
            return false;
        }
    }
    
    
    for (int r = 0; r < N; ++r) {
        if (board[r][col] == num) {
            return false;
        }
    }
    
    
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int r = startRow; r < startRow + 3; ++r) {
        for (int c = startCol; c < startCol + 3; ++c) {
            if (board[r][c] == num) {
                return false;
            }
        }
    }
    
    return true;
}

bool findEmptyLocation(const vector<vector<int>>& board, int& row, int& col) {
    for (row = 0; row < N; ++row) {
        for (col = 0; col < N; ++col) {
            if (board[row][col] == 0) {
                return true;
            }
        }
    }
    return false;
}


bool solveSudoku(vector<vector<int>>& board) {
    int row, col;
    
    if (!findEmptyLocation(board, row, col)) {
        return true; // No empty location means the puzzle is solved
    }
    
    for (int num = 1; num <= N; ++num) {
        if (isValid(board, row, col, num)) {
            board[row][col] = num;
            
            if (solveSudoku(board)) {
                return true;
            }
            
            
            board[row][col] = 0;
        }
    }
    
    return false; 
}

int main() {
  
    vector<vector<int>> sudokuBoard = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };
    
    if (solveSudoku(sudokuBoard)) {
        cout << "Sudoku solved successfully:" << endl;
        printBoard(sudokuBoard);
    } else {
        cout << "No solution exists" << endl;
    }
    
    return 0;
}
